#!/usr/bin/ruby

require 'pp'
require 'rubygems'
require 'data_mapper'

require 'model'
require 'main'
require 'active_support/core_ext/string'

models = [System, Owner, NameServer]

module DeepDump
  module ClassMethods
    def save_model
      @dump_properties = (self.properties - self.serial).map{|sp| sp.name}
      @dump_relationships = self.relationships.map{|r| r.name}
    end

    def dump_properties
      @dump_properties
    end

    def dump_relationships
      @dump_relationships
    end
  end

  module InstanceMethods
    def deep_dump(out = {}, show_self = false, show_empty = false, show_nil = false)
      $dump_stack ||= []
      $dump_stack << self.hash

      self.class.dump_properties.each do |dp|
        o = send(dp)
        out[dp] = o.to_s if show_empty or o
      end

      self.class.dump_relationships.each do |m|
        nesteds = send(m)
        if nesteds.kind_of? Array
          o = []
          nesteds.each do |nested|
            unless $dump_stack.include?(nested.hash)
              o << nested.deep_dump 
            else
              o << :self if show_self
            end
          end
          out[m] = o if show_empty or not o.empty?
        else
          nested = nesteds
          unless $dump_stack.include?(nested.hash)
            out[m] = nested.deep_dump 
          else
            out[m] = :self if show_self
          end
        end
      end
      $dump_stack.pop
      return out
    end
  end
end

models.each do |model|
  model.extend DeepDump::ClassMethods
  model.send :include, DeepDump::InstanceMethods
  model.save_model
end

Main do
  option 'db', 'd' do
    description 'database URL to work on'
    argument_required
    default 'sqlite:test.sql'
  end

  option 'noop', 'n' do
    description 'do not change any data in the database'
  end

  def connect
    puts "Connecting: #{params['db'].value}"

    #DataMapper::Logger.new($stdout, :debug)
    DataMapper::Model.raise_on_save_failure = true

    DataMapper.setup(:default, params['db'].value)

    DataMapper.finalize

    DataMapper.auto_upgrade!
  end

  def record_print(record)
    puts record.to_yaml(:SortKeys => true)
  end

  models.each do |model|
    mode model.name.tableize do
      mode 'new' do
        fattr :model => model

        settable_properties = model.properties - model.serial
        fattr :settable_properties => settable_properties
        relationships = model.relationships
        fattr :relationships => relationships

        settable_properties.each do |p|
          option p.name.to_s.dasherize do
            required if p.key? or p.required?
            argument_required
          end
        end

        relationships.each do |re|
          option re.name.to_s.dasherize.singularize do
            argument_required
            p re.class
            case re.class.name
              when "DataMapper::Associations::ManyToOne::Relationship"
                required if re.required?
              when "DataMapper::Associations::ManyToMany::Relationship"
                description 'can be used more than onece'
            end
          end
        end

        def run
          # collect set values - does not include foreign links
          values = {}
          settable_properties.map{|pr| pr.name.to_s.dasherize}.each do |pr|
            values[pr.underscore] = params[pr].value if params[pr].given?
          end

          # build a list of foreign key record to link to record being created
          to_assign = []
          relationships.each do |re|
            next unless params[re.name.to_s.dasherize.singularize].given?
            params[re.name.to_s.dasherize.singularize].values.each do |value|
              # some foreign records may have multiple natural keys - separate by ','
              split_values = value.split(',')

              # find foreign model - in ManyToMany it may be either parent or child
              foreign_model = eval(re.parent_model_name)
              foreign_model = eval(re.child_model_name) if foreign_model == model

              # properties to search for when looking for foreign record
              search_keys = (foreign_model.properties - foreign_model.serial).select{|p| p.unique? and p.required?}.map{|search_key| search_key.name}

              # building final query by assignment of values to search keys
              query = {}
              search_keys.each do |search_key|
                query[search_key] = split_values.shift
              end

              # collect assignment data
              to_assign << [foreign_model, re.name.to_s, query]
            end
          end

          connect

          # create new record with set values
          m = model.new(values)

          # assign foreign records
          to_assign.each do |foreign_model, name, query|
            forign_record = foreign_model.first(query)
            raise "Fereign record not found: #{foreign_model} #{query.inspect}" unless forign_record

            # append arrays, otherwise set
            if m.send(name).kind_of? Array
              m.send(name) << forign_record
            else
              m.send((name + "=").to_sym, forign_record)
            end
          end

          m.save unless params['noop'].given?

          puts "Insterted #{model.name.downcase}#{" (noop)" if params['noop'].given?}:"
          record_print m.deep_dump
        end
      end

      mode 'list' do
        fattr :model => model
        fattr :order => (model.properties - model.serial).select{|pr| pr.unique?}

        def run
          all = []
          connect
          model.all(:order => order).each do |record|
            all << record.deep_dump
          end
          record_print(model.name.underscore.pluralize.to_sym => all)
        end
      end
    end
  end
end

